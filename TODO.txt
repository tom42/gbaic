* Do not forget to have a look at README.md from shrinkler-arm
  * For instance, the depacker is not yet preserving registers!
* Next up, coding wise
  * Either LZSS+H4 alternative compression scheme
  * Or final binary output, using shrinkler for starters
    * That would require us to write that assembler library.
      * Well we could do this. We've come pretty far there.
* Test debug/release build with
  * gcc 64
  * gcc 32
  * clang?
* Need a break from shrinkler:
  * Wrap up input file loading:
    * Optional flat binary loading (with the option to specify load address and entry point!)
      * Already implement the command line options
      * They are file format independent, so we just do:
        * Load file
        * If options override entry, set it on the input file
        * If options override load address, set it on the input file
        * Well be careful with that. Probably it is better to force the user to set
          entry point and load address if the input is flat binary. Or do not support this at all (processing raw binaries, that is)
    * Remaining sanity checks. Either:
      * Implement them
      * Defer them
      * Discard them
  * We might want to support binary as input file format, but probably this should be opt-in.
    * This means we expect ELF by default and fail if input file is not ELF.
    * Only load file as binary if requested to do so.
* Prepare shrinkler:
  * Put it into 3rdparty/shrinkler (orly? Perhaps we give it a top level directory since we are going to heavily hack it)
    * Is it going to get any tests?
  * Only include the packer sources
  * Include shrinkler's LICENSE.txt!
  * Include a README.md stating CLEARLY that this is NOT the original shrinkler
* Design input file loading
  * Binary files, with an assumed load address of IWRAM (do we allow overriding this?)
  * Elf files, which we convert to raw binary and whose load address we determine from the entry point
* Check: does our argp.h supersede system argp?
* Update copyright notice (Copyright (c) 2020 Thomas Mathys => 2020, 2021)
* For deploying windows binaries, do we need to take care to distribute runtime libraries? Or do we link statically?
* Eventually, get rid of the fmt library (yeah, right)
