* Add all the shrinkler compression options to the command line parser
  * For the 6 options:
    * Implement min/max values (can cxxopts do that?)
    * Put them options somehow into a shrinkler_parameters thing
  * Implement presets. Err. How?
    * Hidden -1 .. -9 options: then they don't show up in help
    * -p,--preset: easier to implement, and more standard anyway, since the preset number is really an argument
* Prepare shrinkler:
  * OK: wrap shrinkler source into a library: we simply need it to do in memory compression of data files, I guess
    * How to we manage compiler flags? Shrinkler won't compile warning-free withour settings I am afraid
  * Put it into 3rdparty/shrinkler (orly? Perhaps we give it a top level directory since we are going to heavily hack it)
    * Try to create a header only library for it
    * Is it going to get any tests?
    * How MUCH are we going to hack it? I'd really not want it to call printf and exit all over the place
  * Only include the packer sources
  * Include shrinkler's LICENSE.txt!
  * Include a README.md stating CLEARLY that this is NOT the original shrinkler
* Stop using submodules?
  * Yes and then hack CXXOPTS to support the following
    * -?
    * Abbreviation of long options (orly?)
* Design input file loading
  * Binary files, with an assumed load address of IWRAM (do we allow overriding this?)
  * Elf files, which we convert to raw binary and whose load address we determine from the entry point
* Remove cxxopts (including the submodule)
* Check: does our argp.h supersede system argp?
